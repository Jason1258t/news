import { db } from '../src/app/firebase.js';
import { collection, doc, setDoc, getDocs } from 'firebase/firestore';
import { readdirSync, readFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç–∞—Ç—å—é –ø–æ ID –∏–∑ JSON —Ñ–∞–π–ª–∞
 */
const loadSingleArticle = (articleId) => {
  try {
    const articlesDir = join(__dirname, 'articles');
    const filePath = join(articlesDir, `${articleId}.json`);
    
    console.log(`üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞: ${filePath}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!readdirSync(articlesDir).includes(`${articleId}.json`)) {
      console.log(`‚ùå –§–∞–π–ª ${articleId}.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ articles`);
      return null;
    }
    
    // –ß–∏—Ç–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º —Ñ–∞–π–ª
    const fileContent = readFileSync(filePath, 'utf8');
    const articleData = JSON.parse(fileContent);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
    if (!articleData[articleId]) {
      console.log(`‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞: –æ–∂–∏–¥–∞–ª—Å—è –∫–ª—é—á "${articleId}"`);
      return null;
    }
    
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ç—å—è: ${articleData[articleId].title}`);
    return articleData[articleId];
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—å–∏ ${articleId}:`, error.message);
    return null;
  }
};

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –æ–¥–Ω–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏
 */
export const forceInitSingleArticle = async (articleId) => {
  try {
    console.log(`üéØ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –°–¢–ê–¢–¨–ò: ${articleId}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å—é –∏–∑ —Ñ–∞–π–ª–∞
    const articleData = loadSingleArticle(articleId);
    
    if (!articleData) {
      console.log(`‚ùå –°—Ç–∞—Ç—å—è ${articleId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞`);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å—Ç–∞—Ç—å—è
    const articlesSnapshot = await getDocs(collection(db, 'articles'));
    const existingArticle = articlesSnapshot.docs.find(doc => doc.id === articleId);
    
    if (existingArticle) {
      console.log(`üìù –°—Ç–∞—Ç—å—è "${articleData.title}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º...`);
    } else {
      console.log(`üÜï –°—Ç–∞—Ç—å—è "${articleData.title}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é...`);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é –≤ Firestore
    const docRef = doc(db, 'articles', articleId);
    await setDoc(docRef, {
      ...articleData,
      createdAt: existingArticle ? existingArticle.data().createdAt : new Date(),
      updatedAt: new Date()
    });
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ ${existingArticle ? '–æ–±–Ω–æ–≤–ª–µ–Ω–∞' : '–¥–æ–±–∞–≤–ª–µ–Ω–∞'}: "${articleData.title}"`);
    
  } catch (error) {
    console.error(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—å–∏ ${articleId}:`, error);
  }
};

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
 */
export const listAvailableArticles = () => {
  try {
    const articlesDir = join(__dirname, 'articles');
    const files = readdirSync(articlesDir);
    const jsonFiles = files.filter(file => file.endsWith('.json'));
    
    console.log('\nüìã –î–û–°–¢–£–ü–ù–´–ï –°–¢–ê–¢–¨–ò:');
    jsonFiles.forEach(file => {
      const articleId = file.replace('.json', '');
      console.log(`   üìÑ ${articleId}`);
    });
    
    return jsonFiles.map(file => file.replace('.json', ''));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ articles:', error.message);
    return [];
  }
};

/**
 * –ß–∏—Ç–∞–µ—Ç –≤—Å–µ JSON —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ articles
 */
const loadArticlesFromFiles = () => {
  try {
    const articlesDir = join(__dirname, 'articles');
    console.log(`üìÅ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${articlesDir}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const files = readdirSync(articlesDir);
    const jsonFiles = files.filter(file => file.endsWith('.json'));
    
    console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ JSON —Ñ–∞–π–ª–æ–≤: ${jsonFiles.length}`);
    
    const articlesData = {};
    
    jsonFiles.forEach(file => {
      try {
        const filePath = join(articlesDir, file);
        const fileContent = readFileSync(filePath, 'utf8');
        const articleData = JSON.parse(fileContent);
        
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç
        const articleId = Object.keys(articleData)[0];
        articlesData[articleId] = articleData[articleId];
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ç—å—è: ${articleData[articleId].title}`);
      } catch (fileError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${file}:`, fileError.message);
      }
    });
    
    return articlesData;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ articles:', error.message);
    return {};
  }
};

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—å–∏ –≤ Firestore –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
 */
export const initArticles = async () => {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–∞—Ç–µ–π –≤ Firestore...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Ç–∞—Ç—å–∏
    const articlesSnapshot = await getDocs(collection(db, 'articles'));
    
    if (articlesSnapshot.empty) {
      console.log('üìö –°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–æ–≤...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å–∏ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
      const articlesData = loadArticlesFromFiles();
      
      if (Object.keys(articlesData).length === 0) {
        console.log('‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
        return;
      }
      
      console.log(`üì• –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç ${Object.keys(articlesData).length} —Å—Ç–∞—Ç–µ–π...`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏ –≤ Firestore
      for (const [articleId, articleData] of Object.entries(articlesData)) {
        try {
          const docRef = doc(db, 'articles', articleId);
          await setDoc(docRef, {
            ...articleData,
            createdAt: new Date(), // –¥–æ–±–∞–≤–ª—è–µ–º timestamp —Å–æ–∑–¥–∞–Ω–∏—è
            updatedAt: new Date()  // –¥–æ–±–∞–≤–ª—è–µ–º timestamp –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          });
          console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞: "${articleData.title}"`);
        } catch (docError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏ ${articleId}:`, docError.message);
        }
      }
      
      console.log('üéâ –í—Å–µ —Å—Ç–∞—Ç—å–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Firestore!');
    } else {
      console.log(`üìñ –í Firestore —É–∂–µ –µ—Å—Ç—å ${articlesSnapshot.size} —Å—Ç–∞—Ç–µ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é`);
    }
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π:', error);
  }
};

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
 */
export const forceInitArticles = async () => {
  try {
    console.log('‚ö†Ô∏è  –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–ï–†–ï–ó–ê–ü–ò–°–¨ –°–¢–ê–¢–ï–ô...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å–∏ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
    const articlesData = loadArticlesFromFiles();
    
    if (Object.keys(articlesData).length === 0) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
      return;
    }
    
    console.log(`üì• –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç ${Object.keys(articlesData).length} —Å—Ç–∞—Ç–µ–π...`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º/–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏
    for (const [articleId, articleData] of Object.entries(articlesData)) {
      try {
        const docRef = doc(db, 'articles', articleId);
        await setDoc(docRef, {
          ...articleData,
          createdAt: new Date(),
          updatedAt: new Date()
        });
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞: "${articleData.title}"`);
      } catch (docError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏ ${articleId}:`, docError.message);
      }
    }
    
    console.log('üéâ –í—Å–µ —Å—Ç–∞—Ç—å–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ Firestore!');
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
  }
};